var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CollapsedDocStrings = true","category":"page"},{"location":"#MolSimToolkitShared.jl","page":"Home","title":"MolSimToolkitShared.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MolSimToolkitShared.jl is a  low-level package defining a series of functions and function names that  are shared among other packages, such as MolSimToolkit.jl,  PDBTools.jl, and ComplexMixtures.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Normally this package won't be used by the end-user, but as a dependency of other packages.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"#Function-name-placeholders","page":"Home","title":"Function name placeholders","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"These function names are considered public:","category":"page"},{"location":"","page":"Home","title":"Home","text":"distance, distances\ncoordination_number, bulk_coordination\ncenter_of_mass\nwrap, wrap_to_first\nalign, align!, rmsd","category":"page"},{"location":"#Methods","page":"Home","title":"Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ MolSimToolkitShared ]","category":"page"},{"location":"#MolSimToolkitShared.align","page":"Home","title":"MolSimToolkitShared.align","text":"align(x, y; mass = nothing)\nalign!(x, y; mass = nothing)\n\nAligns two structures (sets of points in 3D space). Solves the \"Procrustes\" problem, which is to find the best translation, and rotation, that aligns the two structures, minimizing the RMSD between them.\n\nStructures are expected to be of the same size, and the  correspondence is assumed from the vector indices. \n\nalign returns a new vector containing the coordinates of x aligned to y.  align! modifies the input vector x in place.\n\n\n\n\n\n","category":"function"},{"location":"#MolSimToolkitShared.align!","page":"Home","title":"MolSimToolkitShared.align!","text":"align(x, y; mass = nothing)\nalign!(x, y; mass = nothing)\n\nAligns two structures (sets of points in 3D space). Solves the \"Procrustes\" problem, which is to find the best translation, and rotation, that aligns the two structures, minimizing the RMSD between them.\n\nStructures are expected to be of the same size, and the  correspondence is assumed from the vector indices. \n\nalign returns a new vector containing the coordinates of x aligned to y.  align! modifies the input vector x in place.\n\n\n\n\n\n","category":"function"},{"location":"#MolSimToolkitShared.center_of_mass-Tuple{AbstractVector{<:AbstractVector}}","page":"Home","title":"MolSimToolkitShared.center_of_mass","text":"center_of_mass(x::AbstractVector{<:AbstractVector}[, mass::AbstractVector=nothing])\n\nCalculate the center of mass of a set of points.\n\nArguments\n\nx::AbstractVector{<:AbstractVector}: A vector of coordinates.\nmass::AbstractVector: A vector of masses. If not provided, all masses are assumed to be equal.\n\nExample\n\njulia> import MolSimToolkitShared: center_of_mass\n\njulia> x = [ [1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0] ];\n\njulia> center_of_mass(x)\n3-element Vector{Float64}:\n 4.0\n 5.0\n 6.0\n\njulia> center_of_mass(x, [1.0, 2.0, 3.0]) # providing masses\n3-element Vector{Float64}:\n 5.0\n 6.0\n 7.0\n\n\n\n\n\n\n","category":"method"},{"location":"#MolSimToolkitShared.rmsd-Tuple{AbstractVector{<:AbstractVector}, AbstractVector{<:AbstractVector}}","page":"Home","title":"MolSimToolkitShared.rmsd","text":"rmsd(x::AbstractVector,y::AbstractVector)\n\nCalculate the root mean square deviation between two vectors of coordinates.\n\nArguments\n\nx::AbstractVector: A vector of coordinates.\ny::AbstractVector: A vector of coordinates.\n\nReturns\n\nrmsd::Real: The root mean square deviation between the two vectors.\n\njulia> import MolSimToolkitShared: rmsd\n\njulia> x = [ [1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0] ];\n\njulia> y = [ [2.0, 3.0, 4.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0] ];\n\njulia> rmsd(x, y)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"#MolSimToolkitShared.wrap","page":"Home","title":"MolSimToolkitShared.wrap","text":"wrap(x, xref, unit_cell_matrix::SMatrix{N,N,T}) where {N,T}\nwrap(x, xref, sides::AbstractVector)\n\nWraps the coordinates of point x such that it is the minimum image relative to xref. The unit cell  may be given a a static matrix of size (N,N) or as a vector of length N.\n\n\n\n\n\n","category":"function"},{"location":"#MolSimToolkitShared.wrap_to_first","page":"Home","title":"MolSimToolkitShared.wrap_to_first","text":"wrap_to_first(x, unit_cell_matrix)\n\nWraps the coordinates of point x such that the returning coordinates are in the first unit cell with all-positive coordinates. The unit cell  has to be a matrix of size (N,N).\n\nExample\n\njulia> using MolSimToolkitShared: wrap_to_first\n\njulia> uc = [10.0 0.0 0.0; 0.0 10.0 0.0; 0.0 0.0 10.0]\n3Ã—3 Matrix{Float64}:\n 10.0   0.0   0.0\n  0.0  10.0   0.0\n  0.0   0.0  10.0\n\njulia> wrap_to_first([15.0, 13.0, 2.0], uc)\n3-element Vector{Float64}:\n 5.0\n 3.0000000000000004\n 2.0\n\n\n\n\n\n","category":"function"}]
}
